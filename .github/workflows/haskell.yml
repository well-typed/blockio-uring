name: Haskell CI

on:
  push:
    branches: [ "main" ]
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


permissions:
  contents: read

jobs:
  # Build and test
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10", "9.2", "9.4", "9.6", "9.8", "9.10", "9.12"]
        cabal: ["3.12"]
        os: [ubuntu-latest] # ubuntu-latest = ubuntu-24.04
        liburing: ["system"]
        # system liburing is 2.1 on 22.04, 2.5 on 24.04
        include:
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-20.04
          liburing: "liburing-2.1"
          # It's weird, but at the liburing-2.1 tag, the liburing.pc file lists
          # a library version 2.0. From liburing-2.2 onward, the version listed
          # in the liburing.pc file is no longer a mismatch.
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-20.04
          liburing: "liburing-2.9"
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-22.04
          liburing: "liburing-2.1"
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-22.04
          liburing: "liburing-2.9"
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-24.04
          liburing: "liburing-2.1"
        - ghc: "9.6"
          cabal: "3.12"
          os: ubuntu-24.04
          liburing: "liburing-2.9"

    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Haskell
      id: setup-haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true

    - name: Install (specific) liburing from source
      id: setup-liburing-source
      if: ${{ ! (matrix.liburing == 'system') }}
      run: |
        sudo apt-get update
        sudo apt-get -y install pkg-config
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        mkdir tmp
        cd tmp
        git clone https://github.com/axboe/liburing.git
        cd liburing
        git checkout ${{ matrix.liburing }}
        ./configure --cc=gcc --cxx=g++
        make -j$(nproc)
        sudo make install
        cd ../..
        sudo rm -rf ./tmp
        pkg-config --modversion liburing

    - name: Install (newest) liburing from a package manager
      id: setup-liburing-cloned
      if: ${{ matrix.liburing == 'system' }}
      run: |
        sudo apt-get update
        sudo apt-get -y install pkg-config liburing-dev

    - name: Configure the build
      run: |
        cabal configure --enable-test --enable-benchmark --ghc-options="-Werror" --ghc-options="-fno-ignore-asserts"
        cat cabal.project.local

    - name: Record cabal dependencies
      id: record-deps
      run: |
        cabal build all --dry-run

    - name: "Restore cache"
      uses: actions/cache/restore@v4
      id: restore-cabal-cache
      env:
        cache-name: cache-cabal-build
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ matrix.liburing }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-${{ matrix.liburing }}-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-
          ${{ runner.os }}-${{ matrix.ghc }}-${{ matrix.liburing }}-${{ env.cache-name }}-

    - name: Install cabal dependencies
      id: build-dependencies
      run: cabal build --only-dependencies --enable-tests --enable-benchmarks all

    - name: "Save cache"
      uses: actions/cache/save@v4
      id: save-cabal-cache
      # Note: cache-hit will be set to true only when cache hit occurs for the
      # exact key match. For a partial key match via restore-keys or a cache
      # miss, it will be set to false.
      if: steps.build-dependencies.outcome == 'success' && steps.restore-cabal-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key:  ${{ steps.restore-cabal-cache.outputs.cache-primary-key }}

    - name: Build
      run: cabal build all

    - name: Run tests
      env:
        TASTY_TIMEOUT: "5m"
      run: cabal test -j1 --test-show-details=direct all
